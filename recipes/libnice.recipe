# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python

class Recipe(recipe.Recipe):
    name = 'libnice'
    version = '0.1.13'
    stype = SourceType.GIT
    remotes = {'origin': 'https://github.com/james-huang/libnice.git'}
    commit = 'origin/master'
    licenses = [License.LGPLv2_1Plus, License.MPLv1_1]
    configure_options = ' --enable-static --enable-shared --with-gstreamer \
            --without-gstreamer-0.10 --enable-compile-warnings=maximum \
            --disable-gtk-doc'
    deps = ['glib', 'gtk-doc-lite', 'gstreamer-1.0']
    autoreconf = True
    autoreconf_sh = 'gtkdocize && autoreconf -f -i'
    # patches = [
    #     "libnice/0001-agent-Remove-unnecessary-NULL-check.patch",
    #     "libnice/0002-Do-not-update-a-remote-candidate-s-type.patch",
    #     "libnice/0003-Do-not-compare-scope-for-IPv6-address-when-scope-is-.patch",
    #     "libnice/0004-Removing-no-op-assignment.patch",
    #     "libnice/0001-nicesrc-spin-the-agent-mainloop-in-a-separate-thread.patch",
    #     "libnice/0001-TURN-allow-REALM-to-be-empty.patch",
    #     "libnice/0002-TURN-handle-437-Allocation-Mismatch-responses.patch"
    # ]
    files_bins = ['stunbdc', 'stund']
    files_libs = ['libnice']
    files_devel = [
        'include/nice',
        'include/stun',
        'lib/pkgconfig/nice.pc',
    ]
    files_plugins_net = ['lib/gstreamer-1.0/libgstnice%(mext)s']
    # FIXME - if_arp.h? (iOS)

    def configure(self):
        # Only build the shared gst plugin in this recipe.
        # We do need the static libnice.a library, though,
        # so we don't use --disable-static
        shell.replace(os.path.join(self.build_dir, 'gst', 'Makefile.am'),
                      {'-module': '-shared -module'})
        super(Recipe, self).configure()

    # Temporarily prevent pulling from source when I drop print statements everywhere
    def fetch(self):
        print "dont actually fetch anything (distribute updated files)"
        # adding print statments and stuff to /Users/james/cerbero/sources/ios_universal/arm64/libnice-0.1.13
        # need to push changes to all the other architectures
        src_distribution = 'arm64'
        src_path1 = '/Users/james/cerbero/sources/ios_universal'
        src_path2 = 'libnice-0.1.13'
        dst_distributions = ['armv7', 'armv7s', 'x86', 'x86_64']
        updated_files = [
            'agent/agent.c',
            'agent/conncheck.c',
            # 'agent/conncheck.h',
            'agent/component.c',
            'agent/discovery.c',
            'socket/tcp-active.c',
        ]
        for f in updated_files:
          for d in  dst_distributions:
            cmd = "cp %s/%s/%s/%s %s/%s/%s/%s" % (src_path1, src_distribution, src_path2, f, src_path1, d, src_path2, f)
            shell.call(cmd, self.build_dir)

    # Temporarily prevent extract and patch I drop print statements everywhere
    def extract(self):
        shell.call('make clean', self.build_dir)
        print "did a make clean. but dont actually extract anything"

